<?xml version="1.0" encoding="utf-8" ?>

<Page x:Class="Collox.Views.WritePage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:animations="using:CommunityToolkit.WinUI.Animations"
      xmlns:cc="using:Collox.Common"
      xmlns:collections="using:CommunityToolkit.Mvvm.Collections"
      xmlns:conv="using:Collox.Common.Converters"
      xmlns:converters="using:CommunityToolkit.WinUI.Converters"
      xmlns:ctrls="using:CommunityToolkit.WinUI.Controls"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:dev="using:DevWinUI"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:media="using:CommunityToolkit.WinUI.Media"
      xmlns:uictrls="using:CommunityToolkit.WinUI.UI.Controls"
      xmlns:vm="using:Collox.ViewModels"
      xmlns:winUi="using:CommunityToolkit.WinUI"
      d:DataContext="{d:DesignInstance Type=vm:WriteViewModel}"
      Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
      Loaded="InputBox_Loaded"
      mc:Ignorable="d">

    <Page.Resources>

        <conv:TimeSpanToFriendlyConverter x:Key="TimeSpanToFriendlyConverter"
                                          x:Uid="/Helpers/FriendlyTime" />

        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />

        <converters:StringVisibilityConverter x:Key="StringVisibilityConverter" />

        <converters:BoolToObjectConverter x:Key="BoolToObjectConverter"
                                          FalseValue="Right"
                                          TrueValue="Left" />

        <Flyout x:Name="ProcessorFlyout"
                AreOpenCloseAnimationsEnabled="True"
                Closed="ProcessorFlyout_Closed"
                LightDismissOverlayMode="On"
                Opening="ProcessorFlyout_Opening"
              Opened="ProcessorFlyout_Opened">
            <Flyout.FlyoutPresenterStyle>
                <Style TargetType="FlyoutPresenter">
                    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Disabled" />
                    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
                    <Setter Property="IsTabStop" Value="True" />
                    <Setter Property="TabNavigation" Value="Cycle" />
                </Style>
            </Flyout.FlyoutPresenterStyle>
            <StackPanel Spacing="8">
                <ProgressBar x:Name="InitializationProgressBar"
                             HorizontalAlignment="Stretch" />
                <ListView x:Name="ProcessorsListView"
                          ItemsSource="{x:Bind ViewModel.AvailableProcessors, Mode=OneWay}"
                          SelectionMode="Multiple">
                    <ListView.ItemTemplate>
                        <DataTemplate x:DataType="vm:IntelligentProcessorViewModel">
                            <StackPanel>
                                <TextBlock Margin="0,8,0,0"
                                           FontWeight="SemiBold"
                                           Text="{x:Bind Name}" />
                                <TextBlock Margin="4,0,0,0"
                                           FontWeight="Light"
                                           Text="{x:Bind Id}" />
                                <TextBlock Margin="4,0,0,8"
                                           FontWeight="Light"
                                           Foreground="{ThemeResource TextFillColorSecondaryBrush}">
                                    <Run Text="{x:Bind Source}" />
                                    <Run Text="@" />
                                    <Run Text="{x:Bind ModelId}" />
                                    <Run Text="&#x2192;" />
                                    <Run Text="{x:Bind Target}" />
                                </TextBlock>
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
                <Button x:Name="DismissButton"
                        HorizontalAlignment="Stretch"
                        Click="DismissButton_Click"
                        Content="Dismiss" />
            </StackPanel>
        </Flyout>

        <Flyout x:Name="VoiceSettingsFlyout"
                ShowMode="TransientWithDismissOnPointerMoveAway">
            <Flyout.FlyoutPresenterStyle>
                <Style TargetType="FlyoutPresenter">
                    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Disabled" />
                    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
                    <Setter Property="IsTabStop" Value="True" />
                    <Setter Property="TabNavigation" Value="Cycle" />
                </Style>
            </Flyout.FlyoutPresenterStyle>
            <StackPanel Orientation="Vertical">
                <TextBlock x:Uid="SelectVoice"
                           Text="Select voice" />
                <ListView Height="480"
                          Margin="4"
                          HorizontalAlignment="Left"
                          IsItemClickEnabled="True"
                          ItemClick="GridView_ItemClick"
                          ItemsSource="{x:Bind ViewModel.InstalledVoices}"
                          SelectedItem="{x:Bind ViewModel.SelectedVoice, Mode=TwoWay}">


                    <ListView.ItemTemplate>
                        <DataTemplate xmlns:sp="using:System.Speech.Synthesis"
                                      x:DataType="sp:VoiceInfo">

                            <StackPanel Orientation="Horizontal">
                                <TextBlock Width="240"
                                           Height="40"
                                           Margin="4">
                                    <Bold>
                                        <Run Text="{x:Bind Name}" />
                                    </Bold>
                                    <LineBreak />
                                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}"
                                         Text="{x:Bind Culture}" />
                                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}"
                                         Text="•" />
                                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}"
                                         Text="{x:Bind Gender}" />
                                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}"
                                         Text="•" />
                                    <Run Foreground="{ThemeResource TextFillColorSecondaryBrush}"
                                         Text="{x:Bind Age}" />
                                </TextBlock>
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>

                </ListView>
            </StackPanel>
        </Flyout>

        <Flyout x:Name="EmojiFlyout">
            <StackPanel Width="400"
                        Height="400">
                <ctrls:Segmented x:Name="EmojiSegment">
                    <ctrls:SegmentedItem Icon="{winUi:FontIcon Glyph=&#xED54;}" />
                    <ctrls:SegmentedItem Icon="{winUi:FontIcon Glyph=&#xED53;}" />
                    <ctrls:SegmentedItem Icon="{winUi:FontIcon Glyph=&#xED55;}" />
                    <ctrls:SegmentedItem Icon="{winUi:FontIcon Glyph=&#xED56;}" />
                    <ctrls:SegmentedItem Icon="{winUi:FontIcon Glyph=&#xED57;}" />
                    <ctrls:SegmentedItem Icon="{winUi:FontIcon Glyph=&#xED58;}" />
                    <ctrls:SegmentedItem Icon="{winUi:FontIcon Glyph=&#xEB51;}" />
                </ctrls:Segmented>


                <ScrollView Height="380"
                            ContentOrientation="Vertical">
                    <ItemsRepeater ItemsSource="{x:Bind ViewModel.Emojis, Mode=OneTime}">
                        <ItemsRepeater.ItemTemplate>
                            <DataTemplate x:DataType="collections:IReadOnlyObservableGroup">
                                <StackPanel Margin="0,8,0,0"
                                            Orientation="Vertical">
                                    <TextBlock Margin="4"
                                               CanBeScrollAnchor="True"
                                               FontSize="24"
                                               FontWeight="SemiBold"
                                               Text="{x:Bind Key}" />
                                    <ItemsRepeater xmlns:et="using:EmojiToolkit"
                                                   ItemsSource="{x:Bind}">
                                        <ItemsRepeater.ItemTemplate>
                                            <DataTemplate x:DataType="et:EmojiRecord">
                                                <Button Padding="0"
                                                        BorderThickness="0"
                                                        Click="Button_Click"
                                                        Tag="{x:Bind Raw}">
                                                    <FontIcon Margin="0"
                                                              FontFamily="Segoe UI Emoji"
                                                              FontSize="32"
                                                              Glyph="{x:Bind Raw}" />
                                                </Button>

                                            </DataTemplate>
                                        </ItemsRepeater.ItemTemplate>
                                        <ItemsRepeater.Layout>
                                            <UniformGridLayout MinColumnSpacing="1"
                                                               MinItemHeight="48"
                                                               MinItemWidth="48"
                                                               MinRowSpacing="1" />
                                        </ItemsRepeater.Layout>
                                    </ItemsRepeater>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsRepeater.ItemTemplate>
                    </ItemsRepeater>
                </ScrollView>
            </StackPanel>
        </Flyout>

        <DataTemplate x:Name="DefaultTemplate"
                      x:DataType="vm:ColloxMessage">

            <StackPanel>
                <TextBlock Text="{x:Bind RelativeTimestamp, Mode=OneWay, Converter={StaticResource TimeSpanToFriendlyConverter}}" />
                <TextBlock Text="{x:Bind Timestamp}" />
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Name="TextTemplate"
                      x:DataType="vm:TextColloxMessage">
            <RelativePanel MaxWidth="800"
                           HorizontalAlignment="{x:Bind IsGenerated, Converter={StaticResource BoolToObjectConverter}}"
                           Background="{ThemeResource CardBackgroundFillColorDefault}"
                           CornerRadius="8">

                <ctrls:HeaderedContentControl x:Name="TimeHeader"
                                              Margin="8">

                    <ctrls:HeaderedContentControl.Header>
                        <Border Padding="2"
                                HorizontalAlignment="Left"
                                Background="{ThemeResource AccentAAFillColorDefaultBrush}"
                                CornerRadius="4">
                            <uictrls:SwitchPresenter TargetType="x:Boolean"
                                                     Value="{x:Bind IsGenerated}">

                                <uictrls:Case Value="False">
                                    <TextBlock Foreground="{ThemeResource TextOnAccentAAFillColorPrimary}">
                                        <Run Text="{x:Bind RelativeTimestamp, Mode=OneWay, Converter={StaticResource TimeSpanToFriendlyConverter}}" />
                                        <Run FontFamily="Segoe Fluent Icons"
                                             FontSize="12"
                                             FontWeight="Bold"
                                             Text="&#xE917;" />
                                        <Run Text="{x:Bind Timestamp}" />
                                    </TextBlock>
                                </uictrls:Case>
                                <uictrls:Case Value="True">
                                    <StackPanel Orientation="Horizontal">
                                        <FontIcon Foreground="{ThemeResource TextOnAccentAAFillColorPrimary}"
                                                  Glyph="&#xE8BD;" />
                                    </StackPanel>
                                </uictrls:Case>
                            </uictrls:SwitchPresenter>
                        </Border>
                    </ctrls:HeaderedContentControl.Header>
                    <uictrls:MarkdownTextBlock x:Name="MessageMarkdownTextBlock"
                                               Background="Transparent"
                                               FontSize="32"
                                               Text="{x:Bind Text, Mode=OneWay}"
                                               TextWrapping="WrapWholeWords" />
                </ctrls:HeaderedContentControl>
                <Button x:Name="ReadButton"
                        Command="{x:Bind ReadCommand}"
                        RelativePanel.AlignRightWithPanel="True"
                        RelativePanel.AlignTopWith="TimeHeader">
                    <SymbolIcon Symbol="Volume" />
                </Button>
                <ItemsRepeater x:Name="CommentsItemsRepeater"
                               ItemsSource="{x:Bind Comments, Mode=OneWay}"
                               RelativePanel.AlignLeftWithPanel="True"
                               RelativePanel.AlignRightWithPanel="True"
                               RelativePanel.Below="TimeHeader">

                    <ItemsRepeater.ItemTemplate>
                        <DataTemplate x:DataType="vm:ColloxMessageComment">
                            <RelativePanel Margin="8,4,4,4"
                                           HorizontalAlignment="Stretch"
                                           BorderBrush="{ThemeResource CardStrokeColorDefault}"
                                           BorderThickness="1">
                                <TextBlock HorizontalAlignment="Stretch"
                                           FontSize="16"
                                           Foreground="{ThemeResource AccentTextFillColorSecondaryBrush}"
                                           Text="{x:Bind Comment, Mode=OneWay}"
                                           TextWrapping="WrapWholeWords" />


                                <Button x:Name="ReadButton"
                                        Command="{x:Bind ReadCommand}"
                                        RelativePanel.AlignRightWithPanel="True">
                                    <SymbolIcon Symbol="Volume" />
                                </Button>
                            </RelativePanel>
                        </DataTemplate>
                    </ItemsRepeater.ItemTemplate>
                </ItemsRepeater>

                <TextBlock x:Name="ErrorTextBlock"
                           Margin="8"
                           Foreground="{ThemeResource SystemFillColorCriticalBrush}"
                           RelativePanel.AlignLeftWithPanel="True"
                           RelativePanel.AlignRightWithPanel="True"
                           RelativePanel.Below="CommentsItemsRepeater"
                           Text="{x:Bind ErrorMessage, Mode=OneWay}"
                           Visibility="{x:Bind ErrorMessage, Mode=OneWay, Converter={StaticResource StringVisibilityConverter}, ConverterParameter=False}" />
                <ProgressBar Height="4"
                             HorizontalAlignment="Stretch"
                             IsIndeterminate="True"
                             RelativePanel.AlignBottomWithPanel="True"
                             RelativePanel.AlignLeftWithPanel="True"
                             RelativePanel.AlignRightWithPanel="True"
                             RelativePanel.Below="ErrorTextBlock"
                             ShowError="{x:Bind HasProcessingError, Mode=OneWay}"
                             Visibility="{x:Bind IsLoading, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=False}" />
            </RelativePanel>
        </DataTemplate>

        <DataTemplate x:Name="TimeTemplate"
                      x:DataType="vm:TimeColloxMessage">
            <StackPanel Padding="16"
                        Orientation="Horizontal">
                <FontIcon VerticalAlignment="Center"
                          Glyph="&#xE823;" />
                <TextBlock VerticalAlignment="Center"
                           FontSize="24"
                           FontWeight="SemiBold"
                           Text="{x:Bind Time}" />
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Name="InternalTemplate"
                      x:DataType="vm:InternalColloxMessage">

            <InfoBar x:Name="InternalMessageInfoBar"
                     Title="Collox"
                     IsClosable="False"
                     IsIconVisible="True"
                     IsOpen="True"
                     Message="{x:Bind Message}"
                     Severity="{x:Bind Severity}">
                <InfoBar.Resources>
                    <ResourceDictionary Source="ms-appx:///DevWinUI.Controls/Themes/InfoBarInformationalColor.xaml" />
                </InfoBar.Resources>
            </InfoBar>
        </DataTemplate>
        <cc:MessageTemplateSelector x:Name="MessagesTemplate"
                                    DefaultTemplate="{StaticResource DefaultTemplate}"
                                    InternalTemplate="{StaticResource InternalTemplate}"
                                    TextTemplate="{StaticResource TextTemplate}"
                                    TimeTemplate="{StaticResource TimeTemplate}" />
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="48" />
            <RowDefinition Height="*" />
            <RowDefinition Height="84" />
            <RowDefinition Height="42" />
        </Grid.RowDefinitions>

        <CommandBar Grid.Row="0"
                    Background="Transparent"
                    DefaultLabelPosition="Right"
                    IsOpen="False">
            <AppBarElementContainer>
                <StackPanel Margin="4"
                            Orientation="Horizontal"
                            Spacing="4">

                    <ProgressRing Background="{ThemeResource SystemFillColorCautionBackgroundBrush}"
                                  Foreground="{ThemeResource SystemFillColorAttentionBrush}"
                                  IsIndeterminate="False"
                                  Maximum="{x:Bind ViewModel.KeyStrokesCount, Mode=OneWay}"
                                  Value="{x:Bind ViewModel.CharacterCount, Mode=OneWay}" />

                    <StackPanel>
                        <TextBlock Text="{x:Bind ViewModel.CharacterCount, Mode=OneWay}" />
                        <TextBlock Text="{x:Bind ViewModel.KeyStrokesCount, Mode=OneWay}" />
                    </StackPanel>
                </StackPanel>
            </AppBarElementContainer>

            <AppBarButton x:Uid="AiFxButton"
                          Flyout="{StaticResource ProcessorFlyout}"
                          Icon="{dev:FontIcon GlyphCode=E8B4}"
                          Label="AI Fx" />


            <AppBarButton x:Uid="SaveButton"
                          Command="{x:Bind ViewModel.SaveNowCommand}"
                          Icon="Save"
                          Label="Save">
                <AppBarButton.KeyboardAccelerators>
                    <KeyboardAccelerator Key="S"
                                         Modifiers="Control" />
                </AppBarButton.KeyboardAccelerators>
            </AppBarButton>


            <AppBarButton x:Uid="ClearButton"
                          Command="{x:Bind ViewModel.ClearCommand}"
                          Icon="{dev:FontIcon GlyphCode=E75C}"
                          Label="Clear">
                <AppBarButton.KeyboardAccelerators>
                    <KeyboardAccelerator Key="K"
                                         Modifiers="Control" />
                </AppBarButton.KeyboardAccelerators>
            </AppBarButton>

            <AppBarButton x:Uid="InsertTemplateButton"
                          Icon="Page"
                          Label="Insert template">
                <AppBarButton.Flyout>
                    <MenuFlyout x:Name="TemplatesFlyout"
                                Opening="TemplatesFlyout_Opening">
                        <MenuFlyoutItem x:Uid="ManageTemplatesMenuItem"
                                        Click="MenuFlyoutItem_Click"
                                        Icon="Edit"
                                        Tag="predefined"
                                        Text="Manage" />
                        <MenuFlyoutSeparator Tag="predefined" />

                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>

            <AppBarButton x:Uid="SpeakLastButton"
                          Command="{x:Bind ViewModel.SpeakLastCommand}"
                          Icon="{winUi:FontIcon Glyph=&#xEFA9;}"
                          Label="Read last">
                <AppBarButton.KeyboardAccelerators>
                    <KeyboardAccelerator Key="R"
                                         Modifiers="Control" />
                </AppBarButton.KeyboardAccelerators>
            </AppBarButton>

            <AppBarToggleButton x:Uid="SpeakToggleButton"
                                Icon="{winUi:FontIcon Glyph=&#xEFA9;}"
                                IsChecked="{x:Bind ViewModel.IsSpeaking, Mode=TwoWay}"
                                Label="Read aloud">
                <AppBarToggleButton.KeyboardAccelerators>
                    <KeyboardAccelerator Key="R"
                                         Modifiers="Control,Shift" />
                </AppBarToggleButton.KeyboardAccelerators>
            </AppBarToggleButton>

            <AppBarToggleButton x:Uid="BeepToggleButton"
                                Icon="{winUi:FontIcon Glyph=&#xEBC5;}"
                                IsChecked="{x:Bind ViewModel.IsBeeping, Mode=TwoWay}"
                                Label="Beep">
                <AppBarToggleButton.KeyboardAccelerators>
                    <KeyboardAccelerator Key="B"
                                         Modifiers="Control,Shift" />
                </AppBarToggleButton.KeyboardAccelerators>
            </AppBarToggleButton>

            <AppBarButton x:Uid="SettingsButton"
                          Flyout="{StaticResource VoiceSettingsFlyout}"
                          Icon="Setting"
                          Label="Settings">
                <AppBarButton.KeyboardAccelerators>
                    <KeyboardAccelerator Key="I"
                                         Modifiers="Control" />
                </AppBarButton.KeyboardAccelerators>
            </AppBarButton>

        </CommandBar>

        <ListView x:Name="MessageListView"
                  Grid.Row="1"
                  Background="{ThemeResource LayerOnMicaBaseAltFillColorTransparentBrush}"
                  CacheMode="BitmapCache"
                  ItemTemplateSelector="{StaticResource MessagesTemplate}"
                  ItemsSource="{x:Bind ViewModel.Messages, Mode=OneWay}"
                  ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                  ScrollViewer.HorizontalScrollMode="Disabled"
                  ScrollViewer.VerticalScrollBarVisibility="Auto"
                  SelectedValue="{x:Bind ViewModel.SelectedMessage, Mode=TwoWay}"
                  SelectionMode="None">
            <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                </Style>
            </ListView.ItemContainerStyle>

            <ListView.ItemsPanel>
                <ItemsPanelTemplate>
                    <ItemsStackPanel VerticalAlignment="Bottom"
                                     ItemsUpdatingScrollMode="KeepLastItemInView" />
                </ItemsPanelTemplate>
            </ListView.ItemsPanel>

        </ListView>

        <Popup x:Name="TaskPopup"
               Grid.Row="1"
               Grid.RowSpan="2"
               HorizontalOffset="16"
               IsOpen="{x:Bind ViewModel.ShowTasks, Mode=OneWay}"
               VerticalOffset="16">
            <Popup.Child>
                <Border Width="280"
                        Height="200"
                        BorderBrush="{ThemeResource CardStrokeColorDefault}"
                        BorderThickness="1">
                    <Border.Background>
                        <media:AcrylicBrush BlurAmount="15"
                                            TintColor="{ThemeResource SolidBackgroundFillColorTertiary}"
                                            TintOpacity=".6" />
                    </Border.Background>
                    <StackPanel x:Name="TaskPopupContent">
                        <ItemsRepeater ItemsSource="{x:Bind ViewModel.Tasks, Mode=OneWay}">
                            <ItemsRepeater.ItemTemplate>
                                <DataTemplate x:DataType="vm:TaskViewModel">
                                    <CheckBox Margin="8,4"
                                              Foreground="{ThemeResource AccentTextFillColorTertiaryBrush}"
                                              IsChecked="{x:Bind IsDone, Mode=TwoWay}"
                                              Scale="1.5,1.5,1.5">
                                        <TextBlock Text="{x:Bind Name}" />
                                    </CheckBox>
                                </DataTemplate>
                            </ItemsRepeater.ItemTemplate>
                        </ItemsRepeater>
                    </StackPanel>
                </Border>
            </Popup.Child>
        </Popup>
        <Popup x:Name="ProgressPopup"
               HorizontalOffset="16"
               IsOpen="{x:Bind ViewModel.SubmitCommand.IsRunning, Mode=OneWay}"
               VerticalOffset="0">
            <Border Height="48"
                    Background="{StaticResource SolidBackgroundFillColorBase}"
                    CornerRadius="0,0,4,4">

                <animations:Implicit.ShowAnimations>
                    <animations:TranslationAnimation From="0, -96, 0"
                                                     To="0"
                                                     Duration="0:0:1" />
                    <animations:OpacityAnimation From="0"
                                                 To="1.0"
                                                 Duration="0:0:1" />
                </animations:Implicit.ShowAnimations>

                <animations:Implicit.HideAnimations>
                    <animations:OpacityAnimation To="0.0"
                                                 Duration="0:0:1" />
                    <animations:ScalarAnimation Target="Translation.Y"
                                                To="-96"
                                                Duration="0:0:1">
                        <animations:ScalarKeyFrame Key="0.1"
                                                   Value="30" />
                        <animations:ScalarKeyFrame Key="0.5"
                                                   Value="0.0" />
                    </animations:ScalarAnimation>
                </animations:Implicit.HideAnimations>

                <animations:Implicit.Animations>
                    <animations:OffsetAnimation Duration="0:0:1" />
                    <animations:RotationInDegreesAnimation ImplicitTarget="Offset"
                                                           From="0"
                                                           To="0"
                                                           Duration="0:0:1.2">
                        <animations:ScalarKeyFrame Key="0.9"
                                                   Value="80" />
                    </animations:RotationInDegreesAnimation>
                    <animations:ScaleAnimation Duration="0:0:1" />
                </animations:Implicit.Animations>

                <dev:LoadingIndicator Margin="4"
                                      VerticalAlignment="Bottom"
                                      Foreground="SkyBlue"
                                      IsActive="True"
                                      Mode="ArcsRing" />
            </Border>
        </Popup>

        <Popup x:Name="ScrollPopup"
               HorizontalOffset="800"
               VerticalOffset="400">
            <Border>
                <Button x:Name="ScrollToBottomButton"
                        Background="{ThemeResource AccentFillColorTertiaryBrush}"
                        Click="ScrollToBottomButton_Click"
                        CornerRadius="8"
                        Opacity="1">
                    <FontIcon FontSize="24"
                              Foreground="{ThemeResource TextOnAccentFillColorSecondaryBrush}"
                              Glyph="&#xE74B;" />
                </Button>
            </Border>
        </Popup>

        <InfoBar x:Uid="CurrentContext"
                 Title="Current Context"
                 Grid.Row="1"
                 CornerRadius="0,0,4,4"
                 IsOpen="True"
                 Message="{x:Bind ViewModel.ConversationContext.Context, Mode=OneWay}"
                 Severity="Informational">
            <InfoBar.Resources>
                <ResourceDictionary Source="ms-appx:///DevWinUI.Controls/Themes/InfoBarInformationalColor.xaml" />
            </InfoBar.Resources>
        </InfoBar>

        <uictrls:MarkdownTextBlock Grid.Row="2"
                                   FontSize="22"
                                   Text="{x:Bind InputTextBox.Text, Mode=OneWay}"
                                   TextWrapping="WrapWholeWords" />
        <Grid Grid.Row="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="48" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="96" />
            </Grid.ColumnDefinitions>
            <Button Grid.Column="0"
                    VerticalAlignment="Stretch"
                    Flyout="{StaticResource EmojiFlyout}">
                <SymbolIcon Symbol="Emoji2" />
            </Button>
            <TextBox x:Name="InputTextBox"
                     x:Uid="InputTextBox"
                     Grid.Column="1"
                     AcceptsReturn="True"
                     FontSize="22"
                     IsTextPredictionEnabled="True"
                     Loaded="InputBox_Loaded"
                     PlaceholderText="Your message"
                     PreviewKeyDown="InputBox_PreviewKeyDown"
                     Text="{x:Bind Path=ViewModel.InputMessage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <SplitButton x:Name="BtnSubmit"
                         Grid.Column="2"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Stretch"
                         Command="{x:Bind ViewModel.SubmitCommand}">
                <SplitButton.KeyboardAccelerators>
                    <KeyboardAccelerator Key="M"
                                         Invoked="ChangeModeKeyboardAccelerator_Invoked"
                                         Modifiers="Control" />
                </SplitButton.KeyboardAccelerators>
                <SymbolIcon Symbol="{x:Bind ViewModel.SubmitModeIcon, Mode=OneWay}" />

                <SplitButton.Flyout>
                    <MenuFlyout>
                        <MenuFlyoutItem x:Uid="WriteTextItem"
                                        Command="{x:Bind ViewModel.ChangeModeToWriteCommand}"
                                        Icon="Send"
                                        Text="Write text" />
                        <MenuFlyoutItem x:Uid="EnterCommandsItem"
                                        Command="{x:Bind ViewModel.ChangeModeToCmdCommand}"
                                        Icon="Play"
                                        Text="Enter commands" />

                    </MenuFlyout>
                </SplitButton.Flyout>
            </SplitButton>


        </Grid>
    </Grid>
</Page>
